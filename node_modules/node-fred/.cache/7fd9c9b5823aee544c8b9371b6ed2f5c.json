{"dependencies":[{"name":"babel-runtime/helpers/classCallCheck"},{"name":"babel-runtime/helpers/createClass"}],"generated":{"js":"'use strict';\n\n// Implement a builder pattern\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Builder = function () {\n  function Builder() {\n    (0, _classCallCheck3.default)(this, Builder);\n\n    this.url = '';\n  }\n\n  (0, _createClass3.default)(Builder, [{\n    key: \"addAttribute\",\n    value: function addAttribute(attribute) {\n      this.url += (this.url === '' ? '' : '&') + attribute;\n      return this;\n    }\n  }, {\n    key: \"setAPIKey\",\n    value: function setAPIKey(apiKey) {\n      return this.addAttribute('api_key=' + apiKey);\n    }\n  }, {\n    key: \"setFileType\",\n    value: function setFileType(fileType) {\n      return this.addAttribute('file_type=' + fileType);\n    }\n  }, {\n    key: \"isValidDate\",\n    value: function isValidDate(dateString) {\n      var regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n\n      return dateString.match(regEx) != null;\n    }\n  }, {\n    key: \"setRealTimeStart\",\n    value: function setRealTimeStart(params) {\n      var realTimeStart = params['realtime_start'];\n\n      if (!realTimeStart) {\n        return this;\n      } else if (!this.isValidDate(realTimeStart)) {\n        throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n      }\n      return this.addAttribute('realtime_start=' + realTimeStart);\n    }\n  }, {\n    key: \"setRealTimeEnd\",\n    value: function setRealTimeEnd(params) {\n      var realTimeEnd = params['realtime_end'];\n\n      if (!realTimeEnd) {\n        return this;\n      } else if (!this.isValidDate(realTimeEnd)) {\n        throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n      }\n      return this.addAttribute('realtime_end=' + realTimeEnd);\n    }\n  }, {\n    key: \"setLimit\",\n    value: function setLimit(params) {\n      var limit = parseInt(params['limit'], 10);\n\n      if (!limit) {\n        return this;\n      } else if (limit < 0 || limit > 1000) {\n        throw new Error('Limit must be between 0 and 1000');\n      }\n      return this.addAttribute('limit=' + limit);\n    }\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(params) {\n      var offset = parseInt(params['offset'], 10);\n\n      if (!offset) {\n        return this;\n      } else if (offset < 0) {\n        throw new Error('Offset must be greater than 0');\n      }\n      return this.addAttribute('offset=' + offset);\n    }\n  }, {\n    key: \"setOrderBy\",\n    value: function setOrderBy(params) {\n      var orderBy = params['order_by'];\n\n      if (!orderBy) {\n        return this;\n      }\n      return this.addAttribute('order_by=' + orderBy);\n    }\n  }, {\n    key: \"setSortOrder\",\n    value: function setSortOrder(params) {\n      var sortOrder = params['sort_order'];\n\n      if (!sortOrder) {\n        return this;\n      }\n      sortOrder = sortOrder.toLowerCase();\n      if (sortOrder !== 'asc' && sortOrder !== 'desc') {\n        throw new Error('Sort order can only be either asc or desc');\n      }\n      return this.addAttribute('sort_order=' + sortOrder);\n    }\n  }, {\n    key: \"setFilterVariable\",\n    value: function setFilterVariable(params) {\n      var filterVariable = params['filter_variable'];\n\n      if (!filterVariable) {\n        return this;\n      }\n      return this.addAttribute('filter_variable=' + filterVariable);\n    }\n  }, {\n    key: \"setFilterValue\",\n    value: function setFilterValue(params) {\n      var filterValue = params['filter_value'];\n\n      if (!filterValue) {\n        return this;\n      }\n      return this.addAttribute('filter_value=' + filterValue);\n    }\n  }, {\n    key: \"setTagNames\",\n    value: function setTagNames(params) {\n      if (typeof params === 'string') {\n        return this.addAttribute('tag_names=' + params);\n      }\n      var tagNames = params['tag_names'];\n\n      if (!tagNames) {\n        return this;\n      }\n      return this.addAttribute('tag_names=' + tagNames);\n    }\n  }, {\n    key: \"setExcludeTagNames\",\n    value: function setExcludeTagNames(params) {\n      var excludeTagNames = params['exclude_tag_names'];\n\n      if (!excludeTagNames) {\n        return this;\n      }\n      return this.addAttribute('exclude_tag_names=' + excludeTagNames);\n    }\n  }, {\n    key: \"setSearchText\",\n    value: function setSearchText(params) {\n      var searchText = params['search_text'];\n\n      if (!searchText) {\n        return this;\n      }\n      return this.addAttribute('search_text=' + searchText);\n    }\n  }, {\n    key: \"setTagGroupId\",\n    value: function setTagGroupId(params) {\n      var tagGroupId = params['tag_group_id'];\n\n      if (!tagGroupId) {\n        return this;\n      }\n      return this.addAttribute('tag_group_id=' + tagGroupId);\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      return this.url;\n    }\n  }]);\n  return Builder;\n}();\n\nexports.default = Builder;"},"hash":"dbd726a004d810053a6af8acf869c5c2"}