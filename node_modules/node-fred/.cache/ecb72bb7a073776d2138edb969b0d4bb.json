{"dependencies":[{"name":"babel-runtime/core-js/promise"},{"name":"babel-runtime/helpers/classCallCheck"},{"name":"babel-runtime/helpers/createClass"},{"name":"../api"},{"name":"./Builders/releaseBuilder"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _api = require(\"../api\");\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _releaseBuilder = require(\"./Builders/releaseBuilder\");\n\nvar _releaseBuilder2 = _interopRequireDefault(_releaseBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Releases = function () {\n  function Releases(apiKey, returnType) {\n    (0, _classCallCheck3.default)(this, Releases);\n\n    this.apiKey = apiKey;\n    this.returnType = returnType;\n    this.releaseBuilder = new _releaseBuilder2.default();\n  }\n\n  /**\n   * Gets all releases of economic data.\n   * @param {Object} params\n   * @returns {Promise} Resolves with all releases of economic data or errors out\n   */\n\n\n  (0, _createClass3.default)(Releases, [{\n    key: \"getAllReleases\",\n    value: function getAllReleases(params) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this.releaseBuilder.setAPIKey(_this.apiKey).setFileType(_this.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).getUrl();\n\n          _api2.default.get('releases?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets release dates for all releases of economic data.\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases dates of economic data or errors out\n     */\n\n  }, {\n    key: \"getAllReleasesWithDates\",\n    value: function getAllReleasesWithDates(params) {\n      var _this2 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this2.releaseBuilder.setAPIKey(_this2.apiKey).setFileType(_this2.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setIncludeRelatedDatesWithNoData(params).getUrl();\n\n          _api2.default.get('releases/dates?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases dates of economic data or errors out\n     */\n\n  }, {\n    key: \"getRelease\",\n    value: function getRelease(releaseId) {\n      var _this3 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this3.releaseBuilder.setAPIKey(_this3.apiKey).setFileType(_this3.returnType).setReleaseId(releaseId).setRealTimeStart(params).setRealTimeEnd(params).getUrl();\n\n          _api2.default.get('release?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Get release dates for a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases dates of economic data or errors out\n     */\n\n  }, {\n    key: \"getReleaseWithDates\",\n    value: function getReleaseWithDates(releaseId) {\n      var _this4 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this4.releaseBuilder.setAPIKey(_this4.apiKey).setFileType(_this4.returnType).setReleaseId(releaseId).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setSortOrder(params).setIncludeRelatedDatesWithNoData(params).getUrl();\n\n          _api2.default.get('release/dates?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the series on a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the series on a release of economic data or errors out\n     */\n\n  }, {\n    key: \"getSeriesForRelease\",\n    value: function getSeriesForRelease(releaseId) {\n      var _this5 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this5.releaseBuilder.setAPIKey(_this5.apiKey).setFileType(_this5.returnType).setReleaseId(releaseId).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setSortOrder(params).setOrderBy(params).setFilterVariable(params).setFilterValue(params).setTagNames(params).setExcludeTagNames(params).getUrl();\n\n          _api2.default.get('release/series?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the sources for a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the sources for a release of economic data or errors out\n     */\n\n  }, {\n    key: \"getSourcesForRelease\",\n    value: function getSourcesForRelease(releaseId) {\n      var _this6 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this6.releaseBuilder.setAPIKey(_this6.apiKey).setFileType(_this6.returnType).setReleaseId(releaseId).setRealTimeStart(params).setRealTimeEnd(params).getUrl();\n\n          _api2.default.get('release/sources?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the FRED tags for a release.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the sources for a release of economic data or errors out\n     */\n\n  }, {\n    key: \"getTagsForRelease\",\n    value: function getTagsForRelease(releaseId) {\n      var _this7 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this7.releaseBuilder.setAPIKey(_this7.apiKey).setFileType(_this7.returnType).setReleaseId(releaseId).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setSortOrder(params).setOrderBy(params).setTagNames(params).setTagGroupId(params).setSearchText(params).getUrl();\n\n          _api2.default.get('release/tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Get the related FRED tags for one or more FRED tags within a release.\n     * @param {Number} releaseId\n     * @param {String} tagNames\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related FRED tags for one or more FRED tags within a release or errors out\n     */\n\n  }, {\n    key: \"getRelatedTagsForRelease\",\n    value: function getRelatedTagsForRelease(releaseId, tagNames) {\n      var _this8 = this;\n\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this8.releaseBuilder.setAPIKey(_this8.apiKey).setFileType(_this8.returnType).setReleaseId(releaseId).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setSortOrder(params).setOrderBy(params).setTagNames({ 'tag_names': tagNames }).setExcludeTagNames(params).setTagGroupId(params).setSearchText(params).getUrl();\n\n          _api2.default.get('release/related_tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets release table trees for a given release.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the release table trees for a given release or errors out\n     */\n\n  }, {\n    key: \"getTableTreesForRelease\",\n    value: function getTableTreesForRelease(releaseId) {\n      var _this9 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this9.releaseBuilder.setAPIKey(_this9.apiKey).setFileType(_this9.returnType).setReleaseId(releaseId).setElementId(params).setIncludeObservationValues(params).setObservationDate(params).getUrl();\n\n          _api2.default.get('release/tables?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n  }]);\n  return Releases;\n}();\n\nexports.default = Releases;"},"hash":"9fe75229964fa81077b8e727943c1009"}