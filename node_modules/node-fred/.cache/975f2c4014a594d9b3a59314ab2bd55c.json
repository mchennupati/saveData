{"dependencies":[{"name":"babel-runtime/core-js/promise"},{"name":"babel-runtime/helpers/classCallCheck"},{"name":"babel-runtime/helpers/createClass"},{"name":"../api"},{"name":"./Builders/tagsBuilder"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _api = require(\"../api\");\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _tagsBuilder = require(\"./Builders/tagsBuilder\");\n\nvar _tagsBuilder2 = _interopRequireDefault(_tagsBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Tags = function () {\n  function Tags(apiKey, returnType) {\n    (0, _classCallCheck3.default)(this, Tags);\n\n    this.apiKey = apiKey;\n    this.returnType = returnType;\n    this.tagsBuilder = new _tagsBuilder2.default();\n  }\n\n  /**\n   * Gets all tags, search for tags, or get tags by name.\n   * @param {Object} params\n   * @returns {Promise} Resolves with a set of tags or errors out\n   */\n\n\n  (0, _createClass3.default)(Tags, [{\n    key: \"getAllTags\",\n    value: function getAllTags() {\n      var _this = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this.tagsBuilder.setAPIKey(_this.apiKey).setFileType(_this.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setTagNames(params).setTagGroupId(params).setSearchText(params).getUrl();\n\n          _api2.default.get('tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Get the related tags for one or more tags.\n     * @param {string} tagNames\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related tags for one or more tags or errors out\n     */\n\n  }, {\n    key: \"getAllRelatedTags\",\n    value: function getAllRelatedTags(tagNames) {\n      var _this2 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this2.tagsBuilder.setAPIKey(_this2.apiKey).setFileType(_this2.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setTagNames(tagNames).setExcludeTagNames(params).setTagGroupId(params).setSearchText(params).getUrl();\n\n          _api2.default.get('related_tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the series matching tags.\n     * @param {string} tagNames\n     * @param {Object} params\n     * @returns {Promise} Resolves with the series matching tags or errors out\n     */\n\n  }, {\n    key: \"getAllSeriesMatchingTags\",\n    value: function getAllSeriesMatchingTags(tagNames) {\n      var _this3 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this3.tagsBuilder.setAPIKey(_this3.apiKey).setFileType(_this3.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setTagNames({ 'tag_names': tagNames }).setExcludeTagNames(params).getUrl();\n\n          _api2.default.get('tags/series?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n  }]);\n  return Tags;\n}();\n\nexports.default = Tags;"},"hash":"a9950ba3c863baf043124f3be1885a6a"}