{"dependencies":[{"name":"babel-runtime/core-js/promise"},{"name":"babel-runtime/helpers/classCallCheck"},{"name":"babel-runtime/helpers/createClass"},{"name":"../api"},{"name":"./Builders/seriesBuilder"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _api = require(\"../api\");\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _seriesBuilder = require(\"./Builders/seriesBuilder\");\n\nvar _seriesBuilder2 = _interopRequireDefault(_seriesBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Series = function () {\n  function Series(apiKey, returnType) {\n    (0, _classCallCheck3.default)(this, Series);\n\n    this.apiKey = apiKey;\n    this.returnType = returnType;\n    this.seriesBuilder = new _seriesBuilder2.default();\n  }\n\n  /**\n   * Gets an economic data series.\n   * @param {Number} seriesId\n   * @param {Object} params\n   * @returns {Promise} Resolves with an economic data series or errors out\n   */\n\n\n  (0, _createClass3.default)(Series, [{\n    key: \"getSeries\",\n    value: function getSeries(seriesId) {\n      var _this = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this.seriesBuilder.setAPIKey(_this.apiKey).setFileType(_this.returnType).setSeriesId(seriesId).setRealTimeStart(params).setRealTimeEnd(params).getUrl();\n\n          _api2.default.get('series?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the categories for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the categories for an economic data series or errors out\n     */\n\n  }, {\n    key: \"getCategoriesForSeries\",\n    value: function getCategoriesForSeries(seriesId) {\n      var _this2 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this2.seriesBuilder.setAPIKey(_this2.apiKey).setFileType(_this2.returnType).setSeriesId(seriesId).setRealTimeStart(params).setRealTimeEnd(params).getUrl();\n\n          _api2.default.get('series/categories?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the observations or data values for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the observations or data values for an economic data series or errors out\n     */\n\n  }, {\n    key: \"getObservationsForSeries\",\n    value: function getObservationsForSeries(seriesId) {\n      var _this3 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this3.seriesBuilder.setAPIKey(_this3.apiKey).setFileType(_this3.returnType).setSeriesId(seriesId).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setSortOrder(params).setObservationStart(params).setObservationEnd(params).setUnits(params).setFrequency(params).setAggregationMethod(params).setOutputType(params).setVintageDate(params).getUrl();\n\n          _api2.default.get('series/observations?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the release for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the release for an economic data series or errors out\n     */\n\n  }, {\n    key: \"getReleaseForSeries\",\n    value: function getReleaseForSeries(seriesId) {\n      var _this4 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this4.seriesBuilder.setAPIKey(_this4.apiKey).setFileType(_this4.returnType).setSeriesId(seriesId).setRealTimeStart(params).setRealTimeEnd(params).getUrl();\n\n          _api2.default.get('series/release?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets economic data series that match keywords.\n     * @param {String} searchText\n     * @param {Object} params\n     * @returns {Promise} Resolves with economic data series that match keywords or errors out\n     */\n\n  }, {\n    key: \"getSeriesThatMatchesSearch\",\n    value: function getSeriesThatMatchesSearch(searchText) {\n      var _this5 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this5.seriesBuilder.setAPIKey(_this5.apiKey).setFileType(_this5.returnType).setSearchText(searchText).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setFilterVariable(params).setFilterValue(params).setTagNames(params).setExcludeTagNames(params).setSearchType(params).getUrl();\n\n          _api2.default.get('series/search?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the tags for a series search.\n     * @param {Number} seriesId\n     * @param {String} seriesSearchText\n     * @param {Object} params\n     * @returns {Promise} Resolves with the tags for a series search or errors out\n     */\n\n  }, {\n    key: \"getTagsForSeriesSearch\",\n    value: function getTagsForSeriesSearch(seriesSearchText) {\n      var _this6 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this6.seriesBuilder.setAPIKey(_this6.apiKey).setFileType(_this6.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setTagNames(params).setTagGroupId(params).setTagSearchText(params).setSeriesSearchText(seriesSearchText).getUrl();\n\n          _api2.default.get('series/search/tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the related tags for a series search.\n     * @param {Number} seriesId\n     * @param {String} seriesSearchText\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related tags for a series search or errors out\n     */\n\n  }, {\n    key: \"getRelatedTagsForSeriesSearch\",\n    value: function getRelatedTagsForSeriesSearch(seriesSearchText) {\n      var _this7 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this7.seriesBuilder.setAPIKey(_this7.apiKey).setFileType(_this7.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setOrderBy(params).setSortOrder(params).setTagNames(params).setExcludeTagNames(params).setTagGroupId(params).setTagSearchText(params).setSeriesSearchText(seriesSearchText).getUrl();\n\n          _api2.default.get('series/search/related_tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the tags for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the tags for an economic data series or errors out\n     */\n\n  }, {\n    key: \"getTagsForSeries\",\n    value: function getTagsForSeries(seriesId) {\n      var _this8 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this8.seriesBuilder.setAPIKey(_this8.apiKey).setFileType(_this8.returnType).setSeriesId(seriesId).setRealTimeStart(params).setRealTimeEnd(params).setOrderBy(params).setSortOrder(params).getUrl();\n\n          _api2.default.get('series/tags?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets economic data series sorted by when observations were updated on the FRED® server.\n     * @param {Object} params\n     * @returns {Promise} Resolves with economic data series sorted by\n     * when observations were updated on the FRED® server or errors out\n     */\n\n  }, {\n    key: \"getUpdatedSeries\",\n    value: function getUpdatedSeries() {\n      var _this9 = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this9.seriesBuilder.setAPIKey(_this9.apiKey).setFileType(_this9.returnType).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setFilterValue(params).getUrl();\n\n          _api2.default.get('series/updates?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Gets the dates in history when a series' data values were revised or new data values were released.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the dates in history when a\n     * series' data values were revised or new data values were released or errors out\n     */\n\n  }, {\n    key: \"getVintageDatesSeries\",\n    value: function getVintageDatesSeries(seriesId) {\n      var _this10 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          var url = _this10.seriesBuilder.setAPIKey(_this10.apiKey).setFileType(_this10.returnType).setSeriesId(seriesId).setRealTimeStart(params).setRealTimeEnd(params).setLimit(params).setOffset(params).setSortOrder(params).getUrl();\n\n          _api2.default.get('series/vintagedates?' + url).then(function (res) {\n            resolve(res.data);\n          }).catch(function (err) {\n            reject(err.response.data);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n  }]);\n  return Series;\n}();\n\nexports.default = Series;"},"hash":"1eaa64ca7a12406c24184922b34e4027"}